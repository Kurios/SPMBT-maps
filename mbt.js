var rotateRe = function (coord) {
    var rot = ol.coordinate.rotate([(coord[0] - webMercator[0]), (coord[1] - webMercator[1])], rotation);
    return [(rot[0] + webMercator[0]), (rot[1] + webMercator[1])];
};

var addCoords = function (coord, vector) {
    return [(coord[0] + vector[0]), (coord[1] + vector[1])];
};

var hexat = function(location, compression, n) {
    var s = 25*2/Math.sqrt(3);
    var y = Math.floor(n/160);
    var x = (n % 160) - 80 + 0.5 * (y % 2);
    var y = y - 100;
    var retval = [];
    for (var i = 0; i < 6; i++) {
        var dy = Math.cos(Math.PI * i / 3) * s;
        var dx = Math.sin(Math.PI * i / 3) * s;
        retval[i] = rotateRe([location[0] + (x * 50 + dx) / compression, location[1] - (y * 1.5*s + dy)/compression]);
    }
    return retval;
};

var centerButton = document.createElement('button');
centerButton.innerHTML = '&#10011;';
centerButton.title='Center hex grid here';
var centergrid = document.createElement('div');
centergrid.setAttribute('class', 'ol-control ol-unselectable center-grid');
centergrid.appendChild(centerButton);
/*  <input type="button" value="+" id="centergrid" class=".center-grid"/> */
centergrid.addEventListener('click', function() {
    webMercator = map.getView().getCenter();
    allLayers = createLayers();
    map.getLayers().clear();
    map.getLayers().extend(allLayers);
    currGridRotation = map.getView().getRotation();
    document.getElementById("coordinates").innerHTML = getCoordinatesAndRotationString(webMercator, map.getView().getRotation(), compression);
    orientgrid.setAttribute('style', 'visibility: hidden');
    var lola = ol.proj.toLonLat(webMercator);
    window.location.hash = "#" + lola.join(',') + "," + currGridRotation / 3.1415926 * 180;
}, false);

var orientButton = document.createElement('button');
orientButton.innerHTML = '&#10178;';
orientButton.title='Orientate view to grid';
var orientgrid = document.createElement('div');
orientgrid.setAttribute('class', 'ol-control ol-unselectable orientate-to-grid');
orientgrid.setAttribute('style', 'visibility: hidden');
orientgrid.appendChild(orientButton);
/*  <input type="button" value="+" id="orientgrid" class=".orientate-to-grid"/> */
orientgrid.addEventListener('click', function() {
    var rotateAround = ol.animation.rotate({
        anchor: map.getView().getCenter(),
        duration: 200,
        rotation: rotation
    });
    map.beforeRender(rotateAround);
    map.getView().rotate(currGridRotation);
    orientgrid.setAttribute('style', 'visibility: hidden');
}, false);

var downloadButton = document.createElement('button');
downloadButton.innerHTML = '&#8681;';
downloadButton.title='Download map and metadata';
var downloadOptionsForm = document.createElement('form');
downloadOptionsForm.setAttribute('method', 'POST');
downloadOptionsForm.setAttribute('action', 'download.php');
downloadOptionsForm.setAttribute('target', '_blank');
downloadOptionsForm.innerHTML = '<div>Description: <textarea id="desc" name="desc" cols="40" rows="10"></textarea></div>' +
    '<div>map number: <input name="id" type="text" size="3" value="999"/></div>' +
    '<div>Level height: <input type="text" id="level" name="levelheight" size="8" value="10" title="Level height in meters (default: 10 m = 1 level)"/></div>' +
    '<div><input type="hidden" value="" name="coords"/></div>' +
    '<div>Map name (for listing)<input type="text" name="title" size="30" maxlength="40" value="Autogenerated map" style="width: auto"/></div>' +
    '<div style="width: 100%"><input type="submit" value="Download" style="width: 5em; margin-left: auto; margin-right: auto"/></div>';

var downloadOptionsDiv = document.createElement('div');
var closeButton = document.createElement('div');
downloadOptionsDiv.appendChild(closeButton);
downloadOptionsDiv.appendChild(downloadOptionsForm);

document.body.appendChild(downloadOptionsDiv);

downloadOptionsDiv.setAttribute('style', 'visibility: hidden; position: absolute; width: 25em; height: 40em; top: 2em');
var download = document.createElement('div');
download.setAttribute('class', 'ol-control ol-unselectable download-map');
download.appendChild(downloadButton);
download.addEventListener('click', function() {
    var center = webMercator;
    var compr = compression;
    var coords = ol.proj.toLonLat(hexcenter(center, compr, 0)).reverse() + "," +
        ol.proj.toLonLat(hexcenter(center, compr, 159)).reverse() + "," +
        ol.proj.toLonLat(hexcenter(center, compr, 31999)).reverse() + "," +
        ol.proj.toLonLat(hexcenter(center, compr, 31840)).reverse();
    downloadOptionsForm.children[2].children[0].value = levelField.value;
    downloadOptionsForm.children[3].children[0].value = coords;
    var lola = ol.proj.toLonLat(center);
    if (downloadOptionsForm.children[0].children[0].innerHTML === '') {
        downloadOptionsForm.children[0].children[0].innerHTML = 'https://www.venhola.com/maps/geo.php#' + lola[1] + ',' + lola[0] + "," + currGridRotation / 3.1415926 * 180;
    }
    downloadOptionsDiv.setAttribute('style', 'visibility: visible; position: absolute; width: 25em; height: 40em; top: 2em; right: 5em; background: rgba(255, 255, 255, 0.4)');
}, false);

closeButton.setAttribute('class', 'ol-control ol-unselectable download-map');
closeButton.innerHTML = 'âœ•';
closeButton.className = 'closebutton';
closeButton.addEventListener('click', function() {
    downloadOptionsDiv.setAttribute('style', 'visibility: hidden;');
}, false);

var linkButton = document.createElement('button');
linkButton.innerHTML = 'L';
linkButton.title='Link to this map grid';
var linkdiv = document.createElement('div');
linkdiv.setAttribute('class', 'ol-control ol-unselectable link-map');
linkdiv.appendChild(linkButton);
linkdiv.addEventListener('click', function() {
    var lola = ol.proj.toLonLat(webMercator);
    window.prompt("Copy to clipboard: Ctrl+C, Enter",
        'http://www.venhola.com/maps/geo.php?lat=' + lola[1] + '&lo=' + lola[0] + "&rot=" + currGridRotation / 3.1415926 * 180);
}, false);

var levelField = document.createElement('input');
levelField.setAttribute('id', 'level');
levelField.setAttribute('name', 'level');
levelField.setAttribute('value', '10');
levelField.setAttribute('type', 'text');
levelField.title='Level height in meters (default: 10 m = 1 level)';
var levelLabel = document.createElement('label');
levelLabel.innerHTML="&#8597;";
levelLabel.appendChild(levelField);
levelLabel.title='Level height in meters (default: 10 m = 1 level)';
var levelDiv = document.createElement('div');
levelDiv.setAttribute('class', 'ol-control ol-unselectable level-set');
levelDiv.appendChild(levelLabel);

var colorButton = document.createElement('button');
colorButton.innerHTML = '&#11041;';
colorButton.setAttribute('class', 'grey');
var colordiv = document.createElement('div');
colordiv.setAttribute('class', 'ol-control ol-unselectable gridcolor-map');
colordiv.appendChild(colorButton);
colordiv.title='Change hex grid color';
colordiv.addEventListener('click', function() {
    if (colorButton.getAttribute('class') === 'grey') {
        colorButton.setAttribute('class', 'black');

    } else if (colorButton.getAttribute('class') === 'black') {
        colorButton.setAttribute('class', 'white');
    } else if (colorButton.getAttribute('class') === 'white') {
        colorButton.setAttribute('class', 'grey');
    } else {
        colorButton.setAttribute('class', 'grey');
    }
    gridColor = colorButton.getAttribute('class');
    var layers = map.getLayers();
    for (var i=0; i<2000; i++) {
        var piecey = i % 50;
        var piecex = Math.floor(i/50);
        layers.item(i+3).setStyle(new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: gridColor,
                width: 1
            }),
            text: new ol.style.Text({
                font: 'Calibri',
                text: "(" + (piecex*4) + ", " + (piecey*4) + ")",
                fill: new ol.style.Fill({color: 'black'}),
                stroke: new ol.style.Stroke({color: 'black', width: 1}),
                offsetX: 0,
                offsetY: 0
            })
        }));
    }
}, false);

var tileButton = document.createElement('button');
tileButton.innerHTML = 'M';
var tilediv = document.createElement('div');
tilediv.setAttribute('class', 'ol-control ol-unselectable tile-map');
tilediv.appendChild(tileButton);
tilediv.title='Toggle between map and satellite imagery';
tilediv.addEventListener('click', function() {
    if (tileButton.innerHTML === 'M') {
        tileButton.innerHTML = 'C';
        bingLayer.set('opacity', 0.45);
        bingLayer.set('visible', true);
    } else {
        if (tileButton.innerHTML === 'C') {
            tileButton.innerHTML = 'S';
            bingLayer.set('visible', true);
            bingLayer.set('opacity', 1);
        } else {
            tileButton.innerHTML = 'M';
            bingLayer.set('visible', false);
        }
    }

}, false);

var hexcenter = function(location, compression, n) {
    retval = hexat(location, compression, n);
    retval[0][0] = (retval[0][0] + retval[3][0])/2;
    retval[0][1] = (retval[0][1] + retval[3][1])/2;
    return retval[0];
};

var getBoundingBox = function() {
    return Array(addCoords(
        hexat(webMercator, compression, 0)[3],
        ol.coordinate.rotate([-25/compression, 0], rotation)),
        addCoords(
            hexat(webMercator, compression, 159)[3],
            ol.coordinate.rotate([50/compression, 0], rotation)),
        addCoords(
            hexat(webMercator, compression, 31999)[0],
            ol.coordinate.rotate([25/compression, 0], rotation)),
        addCoords(
            hexat(webMercator, compression, 31840)[0],
            ol.coordinate.rotate([-50/compression, 0], rotation))
    );
};


var geojsonObjectHexGrid = function(x,y) {
    var myGrid=Array(16);
    for (var i=0; i<4; i++) {
        for (var j=0; j<4; j++) {
            myGrid[j+i*4] = hexgrid[4*x+j+(4*y+i)*160];
        }
    }
    return {
        'type': 'FeatureCollection',
        'crs': {
            'type': 'name',
            'properties': {
                'name': 'EPSG:3857'
            }
        },
        'features': [
            {
                'type': 'Feature',
                'geometry': {
                    'type': 'MultiPolygon',
                    'coordinates': [
                        myGrid
                    ]
                }
            }
        ]
    };
};

var gridColor = 'grey';

var bingLayer;
var osmLayer;

var createLayers = function() {
    var newWGS = ol.proj.toLonLat(webMercator);
    compression = Math.cos(newWGS[1]*Math.PI/180);

    lrs = new Array(2003);

    hexgrid = new Array(32000);
    for (l = 0; l<32000; l++) {
        hexgrid[l] = hexat(webMercator, compression, l);
    }
    boundingbox = getBoundingBox();

    geojsonObject = {

        'type': 'FeatureCollection',
        'crs': {
            'type': 'name',
            'properties': {
                'name': 'EPSG:3857'
            }
        },
        'features': [
            {
                'type': 'Feature',
                'geometry': {
                    'type': 'MultiLineString',
                    'coordinates': [
                        [boundingbox[0], boundingbox[1]],
                        [boundingbox[2], boundingbox[1]],
                        [boundingbox[0], boundingbox[3]],
                        [boundingbox[2], boundingbox[3]],
                    ]
                }
            }
        ]
    };
    vectorSource = new ol.source.Vector({
        features: (new ol.format.GeoJSON()).readFeatures(geojsonObject)
    });

    vectorLayer = new ol.layer.Vector({
        source: vectorSource,
        style: [new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: 'black',
                width: 3
            })
        })]
    });

    osmLayer = new ol.layer.Tile({
        source: new ol.source.OSM({
            attributions: [
                ol.source.OSM.ATTRIBUTION
            ],
            crossOrigin: null,
            url: '/maps/tiles.php?z={z}&x={x}&y={y}&r=mapnik'
        })
    });

    bingLayer = new ol.layer.Tile({
        source: new ol.source.BingMaps({
            key: 'AhlmzP38tYcWtVYyAxg5Xl5z9Iw4c5sGNEJ3o_SxXCvf1bcgth6BOlsewVWx0Rlo',
            imagerySet: 'Aerial',
            maxZoom: 19
        }),
        visible: false
    });

    lrs[0] = osmLayer;
    lrs[1] = bingLayer;

    lrs[2] = vectorLayer;
    for (l=0; l<2000; l++) {
        var piecey = l % 50;
        var piecex = Math.floor(l/50);
        lrs[l+3] = new ol.layer.Vector({
            minResolution: 0.2,
            maxResolution: 8,
            source: new ol.source.Vector({
                features: (new ol.format.GeoJSON()).readFeatures(geojsonObjectHexGrid(piecex,piecey)),
            }),
            style: new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'grey',
                    width: 1,
                }),
                text: new ol.style.Text({
                    font: 'Calibri',
                    text: "(" + (piecex*4) + ", " + (piecey*4) + ")",
                    fill: new ol.style.Fill({color: 'black'}),
                    stroke: new ol.style.Stroke({color: 'black', width: 1}),
                    offsetX: 0,
                    offsetY: 0
                })
            })
        });
        lrs[l+3].setOpacity(.3);
    }
    return lrs;
};

roundCoordTo = function(numbers, decimals) {
    return [numbers[0].toFixed(decimals), numbers[1].toFixed(decimals)];
};

var getCoordinatesAndRotationString = function(center, rot, compr) {
    return "(0,0)-(159,0)-(159,199)-(0,199) [" +
        roundCoordTo(ol.proj.toLonLat(hexcenter(center, compr, 0)),6) +
        "]-[" +
        roundCoordTo(ol.proj.toLonLat(hexcenter(center, compr, 159)),6) +
        "]-[" +
        roundCoordTo(ol.proj.toLonLat(hexcenter(center, compr, 31999)),6) +
        "]-[" +
        roundCoordTo(ol.proj.toLonLat(hexcenter(center, compr, 31840)),6) +
        "]" +
        ", Rotation: " +
        (rot/Math.PI*180).toFixed(3) +
        " deg";
};
